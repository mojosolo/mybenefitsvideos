name: Update DNS Records

on:
  workflow_dispatch:
    inputs:
      target_ip:
        description: 'Target IP address for A records'
        required: true
        default: '64.29.17.67'
      domain:
        description: 'Domain to update'
        required: true
        default: 'mybenefitsvideos.com'

jobs:
  update-dns:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Update DNS records
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
      run: |
        # Debug: Check if secrets are available
        if [ -z "$CLOUDFLARE_API_TOKEN" ] || [ -z "$CLOUDFLARE_EMAIL" ]; then
          echo "❌ Cloudflare secrets not available at repository level"
          echo "Checking if we can access organization secrets..."
          
          # Try to use Vercel CLI to get secrets if available
          if command -v vercel >/dev/null 2>&1; then
            echo "Trying Vercel CLI for environment variables..."
            vercel env pull .env.temp 2>/dev/null || echo "Vercel not configured"
            if [ -f .env.temp ]; then
              export $(cat .env.temp | grep -E '^CLOUDFLARE_' | xargs)
            fi
          fi
          
          # If still no secrets, provide manual instructions
          if [ -z "$CLOUDFLARE_API_TOKEN" ] || [ -z "$CLOUDFLARE_EMAIL" ]; then
            echo "Manual DNS update required:"
            echo "1. Get CLOUDFLARE_API_TOKEN and CLOUDFLARE_EMAIL from GitHub org secrets"
            echo "2. Set them as repository secrets, or"
            echo "3. Run the DNS update script locally with credentials"
            exit 1
          fi
        fi
        
        echo "✅ Cloudflare credentials found"
        python update_dns.py
        
    - name: Verify DNS changes
      run: |
        echo "Waiting 30 seconds for DNS propagation..."
        sleep 30
        echo "Checking DNS resolution:"
        nslookup ${{ github.event.inputs.domain }} || true
        dig +short ${{ github.event.inputs.domain }} || true